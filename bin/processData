#!/bin/sh
#
# David Adams
# June 2018
#
#
# Script to process event data and create calibration histograms.

if [ "$1" = "-H" ]; then
  echo Usage: $0 FCL RUN [NEVT] [NSKIP]
  echo Runs a lar job in a dedicated directory.
  echo FCL is the base name for the top level fcl file or a sequence
  echo of such names separated with slashes.
  echo In addition to any file on the current fcl path, these names
  echo may be any of the following:
  echo "  fembFFF - Module dataprep only processes FEMB number FFF"
  echo "  dpcr_CR - Module dataprep only processes channel range CR"
  echo "            May also be  sequnece of chanle ranges: CR1_CR2_CR3, etc."
  echo "  cdcr_CR - Module caldata only processes channel range CR"
  echo "  chanCCC - Module dataprep only processes channel CCC"
  echo "  wftickTTT - The channel range for waveforms drawn with tools"
  echo "              adcPlotRaw and adcPlotRaw is (TTT, TTT+1000]"
  echo "  trigT - Select events with trigger index TT."
  echo "  eventEEE - Process event EEE"
  echo "  eventEE1-EE2 - Process events in range (EE1, EE2]"
  echo "  tickTTT - Tick range for channel-tick plots is (TTT, TTTT+1000]"
  echo "  tickTT1-TT2 - Tick range for channel-tick plots is (TT1, TT2]"
  echo "  roithreshTTT - Threshold for ROI finding is TTT"
  echo
  echo "Some of the primary fcl files provided here:"
  echo "  dataprepCal - Run dataprep though trivial calibration."
  echo "  dataprepMit - Run dataprep though mitigation."
  echo "  adcDist - Create ADC distribution (i.e. code frequency) plots."
  echo
  echo "Some of the secondary fcl files provided here:"
  echo "  addChannelTickRaw - Add raw channel-tick plots to the end of dataprep"
  echo "  addChannelTickPrep - Add prepared channel-tick plots to the end of dataprep"
  echo "  addDetdispPrep - Add prepared detector display to the end of dataprep."
  echo "  alltick - Set tick range to all ticks for channel-tick and detector displays."
  echo "  wfRaw100 - Draw raw waveforms for signal rrange (-50, 50)."
  echo "  wfMit100 - Draw raw and mitigated waveforms for signal rrange (-50, 50)."
  exit 0
fi

makeFcl() {
  FCLNAME=$1
  FCLFILE=$FCLNAME.fcl
  if [ -r $FCLFILE ]; then
    echo makeFcl: File already exists: $FCLFILE
    return 2
  fi
  # Run dataprep fo a single FEMB identified by number.
  if [ ${FCLNAME:0:4} = femb ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.producers.dataprep.KeepFembs: [$NUM]" >$FCLFILE
  # Run dataprep for a single channel range indentified by name.
  elif [ ${FCLNAME:0:5} = dpcr_ ]; then    # data prep channel ranges
    CRS=`echo ${FCLNAME:5} | sed 's/_/, /g'`
    echo "physics.producers.dataprep.ChannelRanges: [${CRS}]" >$FCLFILE
  # Run caldata for a single channel range indentified by name.
  elif [ ${FCLNAME:0:5} = cdcr_ ]; then    # data prep channel ranges
    CRS=`echo ${FCLNAME:5} | sed 's/_/, /g'`
    echo "physics.producers.caldata.ChannelRanges: [${CRS}]" >$FCLFILE
  elif [ ${FCLNAME:0:4} = chan ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.producers.dataprep.KeepChannelBegin: $NUM" >$FCLFILE
    echo "physics.producers.dataprep.KeepChannelEnd: $((NUM+1))" >>$FCLFILE
  # wftickTTT: Show waveforms from TTT to TTT+1000
  elif [ ${FCLNAME:0:6} = wftick -a ${#FCLNAME} -gt 6 ]; then
    NUM1=${FCLNAME:6}
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    NUM2=$((NUM1+1000))
    echo "tools.adcPlotRaw.PlotSamMin: $NUM1" >>$FCLFILE
    echo "tools.adcPlotRaw.PlotSamMax: $NUM2" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSamMin: $NUM1" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSamMax: $NUM2" >>$FCLFILE
  elif [ ${FCLNAME:0:4} = trig ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.filters.trigfilter.TimingFlagSelectList: [$NUM]" >$FCLFILE
  elif [ ${FCLNAME:0:5} = event ]; then
    RAN=${FCLNAME:5}  # I or I-J
    NUM1=${RAN%%-*}
    if [ $NUM1 = $RAN ]; then
      NUM2=$((NUM1+1))
    else
      NUM2=${RAN##*-}
    fi
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    while [ ${NUM2:0:1} = 0 -a ${#NUM2} -gt 1 ]; do NUM2=${NUM2:1}; done
    echo "physics.filters.eventfilter.EventBegin: $NUM1" >$FCLFILE
    echo "physics.filters.eventfilter.EventEnd: $NUM2" >>$FCLFILE
  # Set tick range for channel-tick plots, e.g. tick1000 or tick1000-1500
  elif [ ${FCLNAME:0:4} = tick ]; then
    RAN=${FCLNAME:4}  # I or I-J
    NUM1=${RAN%%-*}
    if [ $NUM1 = $RAN ]; then
      NUM2=$((NUM1+1000))
    else
      NUM2=${RAN##*-}
    fi
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    while [ ${NUM2:0:1} = 0 -a ${#NUM2} -gt 1 ]; do NUM2=${NUM2:1}; done
    echo "tools.tickRanges.plotTicks.begin: $NUM1" >$FCLFILE
    echo "tools.tickRanges.plotTicks.end:   $NUM2" >>$FCLFILE
  # ADC ROI threshold
  elif [ ${FCLNAME:0:9} = roithresh ]; then
    NUM=${FCLNAME:9}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "tools.adcThresholdSignalFinder.Threshold: $NUM" >$FCLFILE
  fi
  if [ ! -r $FCLFILE ]; then
    echo makeFcl: Unable to create $FCLFILE
    return 1
  fi
  echo makeFcl: Created $FCLFILE
}

RUNS="1194 1195 1193 1197 1192 1198 1203"
IRUN=1185
FCLPATH=run
NEVT=1
NSKP=0
OUTPUT=0
#RUN=run001191
if [ -n "$1" ]; then
  FCLPATH=$1
fi
if [ -n "$3" ]; then
  NEVT=$3
fi
if [ -n "$4" ]; then
  NSKP=$4
fi
if [ -n "$2" ]; then
  if [ $2 == all ]; then
    for RUN in $RUNS; do
      $0 $FCLPATH $RUN $NEVT $NSKIP
    done
  fi
  IRUN=$2
else
  echo Usage: $0 FCL RUN [NEVT] [NSKIP]
  echo "Use option -H for details"
  exit 0
fi
if [ -n "$5" ]; then
  OUTPUT=1
fi
FRUN=$IRUN
while [ ${#FRUN} -lt 6 ]; do FRUN=0$FRUN; done
RUNNAME0=$FRUN
RUNNAME=run$FRUN

DIR=`echo ${FCLPATH}/$RUNNAME | sed 's#:#/#g'`
echo Run directory: $DIR
rm -rf $DIR
mkdir -p $DIR
cd $DIR

INSPEC=
INFILELIST=$HOME/data/dune/np04/np04_cryostat_commissioning/np04_run${FRUN}_files.txt
if [ -r $INFILELIST ]; then
  if true; then
    # Direct access to dcache
    echo Taking input files from $INFILELIST
    INSPEC="-S $INFILELIST"
  else
    # xrootd (need grid proxy)
    for BASE in `cat $INFILELIST`; do
      echo $BASE | sed 's#/pnfs/#xroot://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr/#g' >>infiles.txt
    done
    INSPEC="-S infiles.txt"
  fi
else
  echo Did not find file list $INFILELIST
  echo Searching directly for files...
  INDIRS="$HOME/data/dune/np04/*"
  echo Searching for matching files in $INDIRS
  INNAMES="$RUNNAME0.root np04_raw_${RUNNAME}_1_dl1.root np04_raw_${RUNNAME}_0001_dl1.root"
  INFILES=
  for INDIR in $INDIRS; do
    for INFILE in $INDIR/$RUNNAME0.root $INDIR/np04_raw_${RUNNAME}_*_dl?.root; do
      if [ -r $INFILE ]; then
        INFILES="$INFILES $INFILE"
      fi
    done
  done
  if [ -z "$INFILES" ]; then
    echo "Input data file(s) not found:"
    for INNAME in $INNAMES; do
      echo "  $INNAME"
    done
    exit 1
  fi
  echo "Input file(s):"
  for INFILE in $INFILES; do
    echo "  $INFILE"
  done
  INSPEC="-s $INFILES"
fi

touch run.fcl
for NAME in `echo $FCLPATH | sed 's#/# #g'`; do
  if ! fcldump $NAME.fcl 2>&1 1>/dev/null; then 
    if ! makeFcl $NAME; then
      echo FCL not found: $NAME.fcl
      exit 2
    fi
  fi
  echo "#include \"$NAME.fcl\"" >>run.fcl
done
FCLFILE=run.fcl

FW_SEARCH_PATH="..:$FW_SEARCH_PATH"
FHICL_FILE_PATH=".:..:../../run:$FHICL_FILE_PATH"
if true; then
  if ! fcldump $FCLFILE 5 >${FCLFILE}dump 2>fcldumperr.txt; then
    echo Ignoring fcldump errors.
  fi
else
  if ! fcldump $FCLFILE 5 >${FCLFILE}dump; then
    exit 3
  fi
fi
if [ $OUTPUT -eq 1 ]; then
  echo "lar -c $FCLFILE $INSPEC -n $NEVT --nskip $NSKP" >run
else
  echo "lar -c $FCLFILE $INSPEC -n $NEVT --nskip $NSKP --no-output" >run
fi
chmod +x run
if [ $IRUN != '0' ]; then
  ./run 2>&1 | tee run.log
  STAT=$?
  if [ $STAT -ne 0 ]; then
    echo "Job failed with error $STAT"
  else
    echo "Job succeeded."
  fi
fi
echo Run directory: $DIR
echo ARGS: '-c' $FCLFILE '-s' $INFILES '-n' $NEVT '--nskip' $NSKP
echo Command: `cat run`
